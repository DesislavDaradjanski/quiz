openapi: 3.0.1
info:
  title: Quiz
  description: >
    A simple quiz application - our first Spring Boot projects as
    java students in startit.bg academy.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: Quiz
    description: Everything about quizzes
  - name: Answer
    description: Everything about answers
  - name: Question
    description: Everything about questions
  - name: User
    description: Everything about users
paths:

  '/api/v1/quizzes/{quizId}':
    parameters:
      - name: quizId
        in: path
        required: true
        schema:
          type: integer

    get:
      tags: [ Quiz ]
      summary: Get Quiz
      operationId: readQuiz
      responses:
        200:
          description: Quiz details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        404:
          description: Quiz doesn't exists
          content: {}

    delete:
      tags: [ Quiz ]
      summary: Delete Quiz
      operationId: deleteQuiz
      responses:
        200:
          description: Quiz is deleted successfully
          content: {}
        404:
          description: Quiz doesn't exists
          content: {}

  '/api/v1/quizzes':
    get:
      tags: [ Quiz ]
      summary: List quezzes
      operationId: listQuizzes
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
      responses:
        200:
          description: Page of quizzes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizList'

    post:
      tags: [ Quiz ]
      summary: Create quiz
      operationId: createQuiz
      requestBody:
        description: The object that describes the quiz we want to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuizRequest'
      responses:
        201:
          description: The object is created. The response contains redirect to the quiz.
          content: {}

  '/api/v1/quizzes/{quizId}/questions/{questionId}/answers':
    parameters:
      - name: quizId
        in: path
        required: true
        schema:
          type: integer
      - name: questionId
        in: path
        required: true
        schema:
          type: integer

    get:
      tags: [ Answer ]
      summary: List answers
      operationId: listAnswers
      responses:
        404:
          description: Not found
          content: { }
        200:
          description: List of answers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerList'

    post:
      tags: [ Answer ]
      summary: Create answer
      operationId: createAnswer
      requestBody:
        description: The object that describes the answer we want to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAnswerRequest'
      responses:
        404:
          description: Not found
          content: { }
        400:
          description: When answers are more than 10
          content: { }
        200:
          description: Ok
          content: { }


  '/api/v1/quizzes/{quizId}/questions/{questionId}/answers/{answerId}':
    parameters:
      - name: quizId
        in: path
        required: true
        schema:
          type: integer
      - name: questionId
        in: path
        required: true
        schema:
          type: integer
      - name: answerId
        in: path
        required: true
        schema:
          type: integer

    delete:
      tags: [ Answer ]
      summary: Delete Answer
      operationId: deleteAnswer
      responses:
        200:
          description: Answer is deleted successfully
          content: {}
        404:
          description: Answer doesn't exists
          content: {}

    put:
      tags: [ Answer ]
      summary: Update Answer
      operationId: updateAnswer
      requestBody:
        description: The object that describes the answer we want to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAnswerRequest'
      responses:
        200:
          description: Answer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerResponse'
        404:
          description: Answer doesn't exists
          content: {}

  '/api/v1/users':
    post:
      tags: [ User ]
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        default:
          description: successful operation
          content: { }


  '/api/v1/users/me':
    get:
      tags: [ User ]
      summary: Get the current user
      operationId: readUser
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    put:
      tags: [ User ]
      summary: Updated user password
      description: This can only be done by the logged in user.
      operationId: updatePassword
      requestBody:
        description: Updated user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    delete:
      tags: [ User ]
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      responses:
        200:
          description: ok
          content: { }


components:
  schemas:

    ChangePasswordRequest:
      type: object
      properties:
        currentPassword:
          format: password
          type: string
        newPassword:
          format: password
          type: string
        newPasswordAgain:
          format: password
          type: string

    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
        email:
          format: email
          type: string
        password:
          format: password
          type: string
        passwordAgain:
          format: password
          type: string

    UserResponse:
      type: object
      properties:
        username:
          type: string

    Quiz:
      allOf:
        - $ref: '#/components/schemas/CreateQuizRequest'
        - type: object
          required: [ id ]
          properties:
            id:
              type: integer

    QuizList:
      type: object
      required: [ totalPages, totalElements, number, size, numberOfElements, content ]
      properties:
        totalPages:
          type: integer
        totalElements:
          type: integer
        number:
          type: integer
        size:
          type: integer
        numberOfElements:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/Quiz'

    CreateQuizRequest:
      type: object
      required: [ title ]
      properties:
        title:
          minLength: 5
          maxLength: 1024
          type: string
        description:
          maxLength: 1024
          type: string
        visible:
          type: boolean
          default: false

    AnswerResponse:
      allOf:
        - $ref: '#/components/schemas/CreateAnswerRequest'
        - type: object
          required: [ id ]
          properties:
            id:
              type: integer

    AnswerList:
      type: object
      required: [ totalPages, totalElements, number, size, numberOfElements, content ]
      properties:
        totalPages:
          type: integer
        totalElements:
          type: integer
        number:
          type: integer
        size:
          type: integer
        numberOfElements:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/AnswerResponse'

    CreateAnswerRequest:
      type: object
      required: [ description, correct, score ]
      properties:
        description:
          minLength: 5
          maxLength: 512
          type: string
        correct:
          type: boolean
          default: false
        score:
          minLength: 1
          maxLength: 10
          type: integer
