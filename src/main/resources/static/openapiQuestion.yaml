openapi: 3.0.1
info:
  title: Quiz
  description: >
    A simple quiz application - our first Spring Boot projects as
    java students in startit.bg academy.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: Quiz
    description: Everything about quizzes
  - name: Answer
    description: Everything about answers
  - name: Question
    description: Everything about questions
  - name: User
    description: Everything about users
paths:
  '/api/v1/quizzes/{quizId}/questions':
    parameters:
      - name: quizId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Question
      summary: Get Question
      operationId: readQuestion
      responses:
        '200':
          description: Question details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '404':
          description: Question doesn't exist
          content: {}
    delete:
      tags:
        - Question
      summary: Delete Question
      operationId: deleteQuestion
      responses:
        '200':
          description: Question is deleted successfully
          content: {}
        '404':
          description: Question doesn't exist
          content: {}
  "/api/v1/quizzes/quizId}":
    get:
      tags:
        - Question
      summary: List questions
      operationId: listQuestion
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
      responses:
        '200':
          description: Page of questions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionList'
    post:
      tags:
        - Question
      summary: Create question
      operationId: createQuestion
      requestBody:
        description: The object that describes the question we want to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuestionRequest'
      responses:
        '404':
          description: The object is not found.
          content: {}
    put:
      tags:
        - Question
      summary: Update question
      operationId: updateQuestion
      requestBody:
        description: The object that describes the question we want to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '404':
          description: The object is not found.
          content: {}
  '/api/v1/quizzes/{quizId}':
    parameters:
      - name: quizId
        in: path
        required: true
        schema:
          type: integer

    get:
      tags: [ Quiz ]
      summary: Get Quiz
      operationId: readQuiz
      responses:
        200:
          description: Quiz details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        404:
          description: Quiz doesn't exists
          content: {}

    delete:
      tags: [ Quiz ]
      summary: Delete Quiz
      operationId: deleteQuiz
      responses:
        200:
          description: Quiz is deleted successfully
          content: {}
        404:
          description: Quiz doesn't exists
          content: {}

  '/api/v1/quizzes':
    get:
      tags: [ Quiz ]
      summary: List quezzes
      operationId: listQuizzes
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
      responses:
        200:
          description: Page of quizzes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizList'

    post:
      tags: [ Quiz ]
      summary: Create quiz
      operationId: createQuiz
      requestBody:
        description: The object that describes the quiz we want to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuizRequest'
      responses:
        201:
          description: The object is created. The response contains redirect to the quiz.
          content: {}

components:
  schemas:
    Quiz:
      allOf:
        - $ref: '#/components/schemas/CreateQuizRequest'
        - type: object
          required: [ id ]
          properties:
            id:
              type: integer

    QuizList:
      type: object
      required: [ totalPages, totalElements, number, size, numberOfElements, content ]
      properties:
        totalPages:
          type: integer
        totalElements:
          type: integer
        number:
          type: integer
        size:
          type: integer
        numberOfElements:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/Quiz'

    CreateQuizRequest:
      type: object
      required: [ title ]
      properties:
        title:
          minLength: 5
          maxLength: 1024
          type: string
        description:
          maxLength: 1024
          type: string
        visible:
          type: boolean
          default: false
